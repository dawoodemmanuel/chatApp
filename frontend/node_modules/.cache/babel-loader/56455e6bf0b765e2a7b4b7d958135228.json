{"ast":null,"code":"var _jsxFileName = \"/home/dawaad/Documents/Project/frontend/src/components/Register.jsx\",\n    _s = $RefreshSig$();\n\nimport { useForm } from 'react-hook-form';\nimport { useNavigate, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './form.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Register() {\n  _s();\n\n  var _errors$Username, _errors$Email, _errors$Password, _errors$Password2, _errors$Password3;\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm(); //const navigate = useNavigate()\n\n  const toastCSS = {\n    position: \"bottom-right\",\n    autoClose: 8000,\n    pauseOnHover: true,\n    draggable: true //theme: \"dark\",\n\n  };\n\n  const onSubmit = async data => {\n    const {\n      Username,\n      Email,\n      Password\n    } = data;\n    const {\n      check\n    } = axios.post('/register', {\n      username: Username,\n      email: Email,\n      password: Password\n    });\n\n    if (check.res === false) {\n      toast.error(\"This Email is already exist\", toastCSS);\n    }\n\n    if (check.res === true) {\n      toast.success(\"Registration is Sccessful\", toastCSS);\n      localStorage.setItem(\"react-chat-app\", JSON.stringify(check.user));\n    } // .then(res => {\n    //     if (res.data === true) {\n    //         toast.success(\"Registration is successful\", toastCSS)\n    //         localStorage.setItem(\"react-chat-app\",\n    //             JSON.stringify(check.user))\n    //     } \n    //     if(res.data === false) {\n    //         toast.error(\"This Email is already Exist\", toastCSS)\n    //     }\n    // })\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register for ChatApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      method: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"formfield\",\n        placeholder: \"Enter your Username\",\n        ...register(\"Username\", {\n          required: true,\n          maxLength: 20\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), ((_errors$Username = errors.Username) === null || _errors$Username === void 0 ? void 0 : _errors$Username.type) === \"required\" && toast.error(\"User Name is required\", toastCSS), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        className: \"formfield\",\n        placeholder: \"Enter your Email\",\n        ...register(\"Email\", {\n          required: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), ((_errors$Email = errors.Email) === null || _errors$Email === void 0 ? void 0 : _errors$Email.type) === \"required\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Email is required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        className: \"formfield\",\n        placeholder: \"Enter your Password\",\n        ...register(\"Password\", {\n          required: true,\n          minLength: 8,\n          maxLength: 20\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), ((_errors$Password = errors.Password) === null || _errors$Password === void 0 ? void 0 : _errors$Password.type) === \"required\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Password is required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), ((_errors$Password2 = errors.Password) === null || _errors$Password2 === void 0 ? void 0 : _errors$Password2.type) === \"minLength\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Password should be of atleast of 8 characters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), ((_errors$Password3 = errors.Password) === null || _errors$Password3 === void 0 ? void 0 : _errors$Password3.type) === \"maxLength\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Password should not be more than 20 characters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"formfield\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Already have an account\", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/login\",\n          children: \" Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Register, \"cSudtlZF25wA1QXS6hk7TRnoNuU=\", false, function () {\n  return [useForm];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/home/dawaad/Documents/Project/frontend/src/components/Register.jsx"],"names":["useForm","useNavigate","Link","axios","ToastContainer","toast","Register","register","handleSubmit","formState","errors","toastCSS","position","autoClose","pauseOnHover","draggable","onSubmit","data","Username","Email","Password","check","post","username","email","password","res","error","success","localStorage","setItem","JSON","stringify","user","required","maxLength","type","minLength"],"mappings":"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","sourcesContent":["import { useForm } from 'react-hook-form'\nimport { useNavigate, Link } from 'react-router-dom'\nimport axios from 'axios'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './form.css'\n\nfunction Register() {\n\n    const { register, handleSubmit, formState: { errors } } = useForm()\n    //const navigate = useNavigate()\n    const toastCSS = {\n        position: \"bottom-right\",\n        autoClose: 8000,\n        pauseOnHover: true,\n        draggable: true,\n        //theme: \"dark\",\n    }\n    const onSubmit = async (data) => {\n        const { Username, Email, Password } = data\n        const { check } = axios.post('/register', {\n            username: Username,\n            email: Email,\n            password: Password\n        })\n        if (check.res === false) {\n            toast.error(\"This Email is already exist\", toastCSS)\n        }\n        if (check.res === true) {\n            toast.success(\"Registration is Sccessful\", toastCSS)\n            localStorage.setItem(\"react-chat-app\",\n                JSON.stringify(check.user))\n        }\n    \n    // .then(res => {\n\n    //     if (res.data === true) {\n    //         toast.success(\"Registration is successful\", toastCSS)\n    //         localStorage.setItem(\"react-chat-app\",\n    //             JSON.stringify(check.user))\n    //     } \n    //     if(res.data === false) {\n    //         toast.error(\"This Email is already Exist\", toastCSS)\n    //     }\n    // })\n}\n\nreturn (\n    <div className='formContainer'>\n        <h2>Register for ChatApp</h2>\n        <form onSubmit={handleSubmit(onSubmit)} method=\"post\">\n            <input className='formfield'\n                placeholder='Enter your Username'\n                {...register(\"Username\",\n                    {\n                        required: true,\n                        maxLength: 20,\n                    })} />\n            {errors.Username?.type === \"required\" &&\n                toast.error(\"User Name is required\", toastCSS)}\n\n            <input type=\"email\"\n                className='formfield'\n                placeholder='Enter your Email'\n                {...register(\"Email\", {\n                    required: true,\n                })} />\n            {errors.Email?.type === \"required\" &&\n                <div>Email is required</div>}\n\n            <input type=\"password\"\n                className='formfield'\n                placeholder='Enter your Password'\n                {...register(\"Password\", {\n                    required: true,\n                    minLength: 8,\n                    maxLength: 20,\n                })} />\n            {errors.Password?.type === \"required\" &&\n                <div>Password is required</div>}\n            {errors.Password?.type === \"minLength\" &&\n                <div>Password should be of atleast of 8 characters</div>}\n            {errors.Password?.type === \"maxLength\" &&\n                <div>Password should not be more than 20 characters</div>}\n\n            <button className='formfield'>Register</button>\n            <span>Already have an account\n                <Link to=\"/login\"> Login</Link></span>\n        </form>\n        <ToastContainer />\n    </div>\n)\n}\n\n\nexport default Register\n"]},"metadata":{},"sourceType":"module"}