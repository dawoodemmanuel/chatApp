{"ast":null,"code":"var _jsxFileName = \"/home/dawaad/Documents/Project/frontend/src/components/Register.jsx\",\n    _s = $RefreshSig$();\n\nimport { useForm } from 'react-hook-form';\nimport { useNavigate, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './form.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Register() {\n  _s();\n\n  var _errors$Username, _errors$Email, _errors$Password, _errors$Password2, _errors$Password3;\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm();\n  const navigate = useNavigate();\n  const toastCSS = {\n    position: \"bottom-right\",\n    autoClose: 8000,\n    pauseOnHover: true,\n    draggable: true //theme: \"dark\",\n\n  };\n\n  const onSubmit = async data => {\n    const {\n      Username,\n      Email,\n      Password\n    } = data;\n    const check = axios.post('/register', {\n      username: Username,\n      email: Email,\n      password: Password\n    }).then(res => {\n      if (res.data == true) {\n        toast.success(\"Registration is successful\");\n        localStorage.setItem(\"react-chat-app\", JSON.stringify(check.user));\n      } else {\n        toast.error(\"This Email is already Exist\", toast);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register for ChatApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      method: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"formfield\",\n        placeholder: \"Enter your Username\",\n        ...register(\"Username\", {\n          required: true,\n          maxLength: 20\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), ((_errors$Username = errors.Username) === null || _errors$Username === void 0 ? void 0 : _errors$Username.type) === \"required\" && toast.error(\"User Name is required\", toastCSS), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        className: \"formfield\",\n        placeholder: \"Enter your Email\",\n        ...register(\"Email\", {\n          required: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), ((_errors$Email = errors.Email) === null || _errors$Email === void 0 ? void 0 : _errors$Email.type) === \"required\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Email is required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        className: \"formfield\",\n        placeholder: \"Enter your Password\",\n        ...register(\"Password\", {\n          required: true,\n          minLength: 8,\n          maxLength: 20\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), ((_errors$Password = errors.Password) === null || _errors$Password === void 0 ? void 0 : _errors$Password.type) === \"required\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Password is required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), ((_errors$Password2 = errors.Password) === null || _errors$Password2 === void 0 ? void 0 : _errors$Password2.type) === \"minLength\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Password should be of atleast of 8 characters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), ((_errors$Password3 = errors.Password) === null || _errors$Password3 === void 0 ? void 0 : _errors$Password3.type) === \"maxLength\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Password should not be more than 20 characters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"formfield\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Already have an account\", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/login\",\n          children: \" Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Register, \"hvZci8bfHEyrOM2r7yZN4BE/YxQ=\", false, function () {\n  return [useForm, useNavigate];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/home/dawaad/Documents/Project/frontend/src/components/Register.jsx"],"names":["useForm","useNavigate","Link","axios","ToastContainer","toast","Register","register","handleSubmit","formState","errors","navigate","toastCSS","position","autoClose","pauseOnHover","draggable","onSubmit","data","Username","Email","Password","check","post","username","email","password","then","res","success","localStorage","setItem","JSON","stringify","user","error","required","maxLength","type","minLength"],"mappings":"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","sourcesContent":["import { useForm } from 'react-hook-form'\nimport { useNavigate, Link } from 'react-router-dom'\nimport axios from 'axios'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './form.css'\n\nfunction Register() {\n\n    const { register, handleSubmit, formState: { errors } } = useForm()\n    const navigate = useNavigate()\n    const toastCSS = {\n        position: \"bottom-right\",\n        autoClose: 8000,\n        pauseOnHover: true,\n        draggable: true,\n        //theme: \"dark\",\n    }\n    const onSubmit = async (data) => {\n        const { Username, Email, Password } = data\n        const check = axios.post('/register', {\n            username: Username,\n            email: Email,\n            password: Password\n        }).then(res => {\n\n            if (res.data == true) {\n                toast.success(\"Registration is successful\")\n                localStorage.setItem(\"react-chat-app\",\n                    JSON.stringify(check.user))\n            } else {\n                toast.error(\"This Email is already Exist\", toast)\n            }\n        })\n    }\n\n    return (\n        <div className='formContainer'>\n            <h2>Register for ChatApp</h2>\n            <form onSubmit={handleSubmit(onSubmit)} method=\"post\">\n                <input className='formfield'\n                    placeholder='Enter your Username'\n                    {...register(\"Username\",\n                        {\n                            required: true,\n                            maxLength: 20,\n                        })} />\n                {errors.Username?.type === \"required\" &&\n                    toast.error(\"User Name is required\", toastCSS)}\n\n                <input type=\"email\"\n                    className='formfield'\n                    placeholder='Enter your Email'\n                    {...register(\"Email\", {\n                        required: true,\n                    })} />\n                {errors.Email?.type === \"required\" &&\n                    <div>Email is required</div>}\n\n                <input type=\"password\"\n                    className='formfield'\n                    placeholder='Enter your Password'\n                    {...register(\"Password\", {\n                        required: true,\n                        minLength: 8,\n                        maxLength: 20,\n                    })} />\n                {errors.Password?.type === \"required\" &&\n                    <div>Password is required</div>}\n                {errors.Password?.type === \"minLength\" &&\n                    <div>Password should be of atleast of 8 characters</div>}\n                {errors.Password?.type === \"maxLength\" &&\n                    <div>Password should not be more than 20 characters</div>}\n\n                <button className='formfield'>Register</button>\n                <span>Already have an account\n                    <Link to=\"/login\"> Login</Link></span>\n            </form>\n            <ToastContainer />\n        </div>\n    )\n}\n\n\nexport default Register\n"]},"metadata":{},"sourceType":"module"}